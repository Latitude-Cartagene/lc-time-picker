[{"/Users/jeremy/Projects/lc-time-picker/src/index.js":"1","/Users/jeremy/Projects/lc-time-picker/src/lib/index.js":"2","/Users/jeremy/Projects/lc-time-picker/src/lib/TimePicker.jsx":"3","/Users/jeremy/Projects/lc-time-picker/src/lib/placements.js":"4","/Users/jeremy/Projects/lc-time-picker/src/lib/Panel.jsx":"5","/Users/jeremy/Projects/lc-time-picker/src/lib/Header.jsx":"6","/Users/jeremy/Projects/lc-time-picker/src/lib/Combobox.jsx":"7","/Users/jeremy/Projects/lc-time-picker/src/lib/Select.jsx":"8"},{"size":733,"mtime":1612435819967,"results":"9","hashOfConfig":"10"},{"size":886,"mtime":1612435343364,"results":"11","hashOfConfig":"10"},{"size":7879,"mtime":1612435478680,"results":"12","hashOfConfig":"10"},{"size":617,"mtime":1612435379948,"results":"13","hashOfConfig":"10"},{"size":5601,"mtime":1612435474653,"results":"14","hashOfConfig":"10"},{"size":5147,"mtime":1612435350838,"results":"15","hashOfConfig":"10"},{"size":4958,"mtime":1612435797560,"results":"16","hashOfConfig":"10"},{"size":3249,"mtime":1612435380017,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ksv6ys",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/jeremy/Projects/lc-time-picker/src/index.js",[],"/Users/jeremy/Projects/lc-time-picker/src/lib/index.js",[],["36","37"],"/Users/jeremy/Projects/lc-time-picker/src/lib/TimePicker.jsx",["38"],"import React, { Component } from 'react';\nimport Trigger from 'rc-trigger';\nimport classNames from 'classnames';\nimport Panel from './Panel';\nimport placements from './placements';\n\nfunction noop() {}\n\nfunction refFn(field, component) {\n  this[field] = component;\n}\n\nclass Picker extends Component {\n  static defaultProps = {\n    clearText: 'clear',\n    prefixCls: 'rc-time-picker',\n    defaultOpen: false,\n    inputReadOnly: false,\n    style: {},\n    className: '',\n    inputClassName: '',\n    popupClassName: '',\n    popupStyle: {},\n    align: {},\n    defaultOpenValue: new Date(),\n    allowEmpty: true,\n    showHour: true,\n    showMinute: true,\n    showSecond: true,\n    disabledHours: noop,\n    disabledMinutes: noop,\n    disabledSeconds: noop,\n    hideDisabledOptions: false,\n    placement: 'bottomLeft',\n    onChange: noop,\n    onAmPmChange: noop,\n    onOpen: noop,\n    onClose: noop,\n    onFocus: noop,\n    onBlur: noop,\n    addon: noop,\n    use12Hours: false,\n    focusOnOpen: false,\n    onKeyDown: noop,\n  };\n\n  constructor(props) {\n    super(props);\n    this.saveInputRef = refFn.bind(this, 'picker');\n    this.savePanelRef = refFn.bind(this, 'panelInstance');\n    const { defaultOpen, defaultValue, open = defaultOpen, value = defaultValue } = props;\n    this.state = {\n      open,\n      value,\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const newState = {};\n    if ('value' in props) {\n      newState.value = props.value;\n    }\n    if (props.open !== undefined) {\n      newState.open = props.open;\n    }\n    return Object.keys(newState).length > 0\n      ? {\n          ...state,\n          ...newState,\n        }\n      : null;\n  }\n\n  onPanelChange = value => {\n    this.setValue(value);\n  };\n\n  onAmPmChange = ampm => {\n    const { onAmPmChange } = this.props;\n    onAmPmChange(ampm);\n  };\n\n  onClear = event => {\n    event.stopPropagation();\n    this.setValue(null);\n    this.setOpen(false);\n  };\n\n  onVisibleChange = open => {\n    this.setOpen(open);\n  };\n\n  onEsc = () => {\n    this.setOpen(false);\n    this.focus();\n  };\n\n  onKeyDown = e => {\n    if (e.keyCode === 40) {\n      this.setOpen(true);\n    }\n  };\n\n  setValue(value) {\n    const { onChange } = this.props;\n    if (!('value' in this.props)) {\n      this.setState({\n        value,\n      });\n    }\n    onChange(value);\n  }\n\n  getFormat() {\n    const { format, showHour, showMinute, showSecond, use12Hours } = this.props;\n    if (format) {\n      return format;\n    }\n\n    if (use12Hours) {\n      const fmtString = [showHour ? 'h' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : '']\n        .filter(item => !!item)\n        .join(':');\n\n      return fmtString.concat(' a');\n    }\n\n    return [showHour ? 'HH' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : '']\n      .filter(item => !!item)\n      .join(':');\n  }\n\n  getPanelElement() {\n    const {\n      prefixCls,\n      placeholder,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      hideDisabledOptions,\n      inputReadOnly,\n      showHour,\n      showMinute,\n      showSecond,\n      defaultOpenValue,\n      clearText,\n      addon,\n      use12Hours,\n      focusOnOpen,\n      onKeyDown,\n      hourStep,\n      minuteStep,\n      secondStep,\n      clearIcon,\n    } = this.props;\n    const { value } = this.state;\n    return (\n      <Panel\n        clearText={clearText}\n        prefixCls={`${prefixCls}-panel`}\n        ref={this.savePanelRef}\n        value={value}\n        inputReadOnly={inputReadOnly}\n        onChange={this.onPanelChange}\n        onAmPmChange={this.onAmPmChange}\n        defaultOpenValue={defaultOpenValue}\n        showHour={showHour}\n        showMinute={showMinute}\n        showSecond={showSecond}\n        onEsc={this.onEsc}\n        format={this.getFormat()}\n        placeholder={placeholder}\n        disabledHours={disabledHours}\n        disabledMinutes={disabledMinutes}\n        disabledSeconds={disabledSeconds}\n        hideDisabledOptions={hideDisabledOptions}\n        use12Hours={use12Hours}\n        hourStep={hourStep}\n        minuteStep={minuteStep}\n        secondStep={secondStep}\n        addon={addon}\n        focusOnOpen={focusOnOpen}\n        onKeyDown={onKeyDown}\n        clearIcon={clearIcon}\n      />\n    );\n  }\n\n  getPopupClassName() {\n    const { showHour, showMinute, showSecond, use12Hours, prefixCls, popupClassName } = this.props;\n    let selectColumnCount = 0;\n    if (showHour) {\n      selectColumnCount += 1;\n    }\n    if (showMinute) {\n      selectColumnCount += 1;\n    }\n    if (showSecond) {\n      selectColumnCount += 1;\n    }\n    if (use12Hours) {\n      selectColumnCount += 1;\n    }\n    // Keep it for old compatibility\n    return classNames(\n      popupClassName,\n      {\n        [`${prefixCls}-panel-narrow`]: (!showHour || !showMinute || !showSecond) && !use12Hours,\n      },\n      `${prefixCls}-panel-column-${selectColumnCount}`,\n    );\n  }\n\n  setOpen(open) {\n    const { onOpen, onClose } = this.props;\n    const { open: currentOpen } = this.state;\n    if (currentOpen !== open) {\n      if (!('open' in this.props)) {\n        this.setState({ open });\n      }\n      if (open) {\n        onOpen({ open });\n      } else {\n        onClose({ open });\n      }\n    }\n  }\n\n  focus() {\n    this.picker.focus();\n  }\n\n  blur() {\n    this.picker.blur();\n  }\n\n  renderClearButton() {\n    const { value } = this.state;\n    const { prefixCls, allowEmpty, clearIcon, clearText, disabled } = this.props;\n    if (!allowEmpty || !value || disabled) {\n      return null;\n    }\n\n    if (React.isValidElement(clearIcon)) {\n      const { onClick } = clearIcon.props || {};\n      return React.cloneElement(clearIcon, {\n        onClick: (...args) => {\n          if (onClick) onClick(...args);\n          this.onClear(...args);\n        },\n      });\n    }\n\n    return (\n      <a\n        role=\"button\"\n        className={`${prefixCls}-clear`}\n        title={clearText}\n        onClick={this.onClear}\n        tabIndex={0}\n      >\n        {clearIcon || <i className={`${prefixCls}-clear-icon`} />}\n      </a>\n    );\n  }\n\n  render() {\n    const {\n      prefixCls,\n      placeholder,\n      placement,\n      align,\n      id,\n      disabled,\n      transitionName,\n      style,\n      className,\n      inputClassName,\n      getPopupContainer,\n      name,\n      autoComplete,\n      onFocus,\n      onBlur,\n      autoFocus,\n      inputReadOnly,\n      inputIcon,\n      popupStyle,\n    } = this.props;\n    const { open, value } = this.state;\n    const popupClassName = this.getPopupClassName();\n    \n    return (\n      <Trigger\n        prefixCls={`${prefixCls}-panel`}\n        popupClassName={popupClassName}\n        popupStyle={popupStyle}\n        popup={this.getPanelElement()}\n        popupAlign={align}\n        builtinPlacements={placements}\n        popupPlacement={placement}\n        action={disabled ? [] : ['click']}\n        destroyPopupOnHide\n        getPopupContainer={getPopupContainer}\n        popupTransitionName={transitionName}\n        popupVisible={open}\n        onPopupVisibleChange={this.onVisibleChange}\n      >\n        <span className={classNames(prefixCls, className)} style={style}>\n          <input\n            className={classNames(`${prefixCls}-input`, inputClassName)}\n            ref={this.saveInputRef}\n            type=\"text\"\n            placeholder={placeholder}\n            name={name}\n            onKeyDown={this.onKeyDown}\n            disabled={disabled}\n            value={(value && value.format(this.getFormat())) || ''}\n            autoComplete={autoComplete}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            autoFocus={autoFocus} // eslint-disable-line jsx-a11y/no-autofocus\n            onChange={noop}\n            readOnly={!!inputReadOnly}\n            id={id}\n          />\n          {inputIcon || <span className={`${prefixCls}-icon`} />}\n          {this.renderClearButton()}\n        </span>\n      </Trigger>\n    );\n  }\n}\n\nexport default Picker;\n","/Users/jeremy/Projects/lc-time-picker/src/lib/placements.js",[],"/Users/jeremy/Projects/lc-time-picker/src/lib/Panel.jsx",[],"/Users/jeremy/Projects/lc-time-picker/src/lib/Header.jsx",[],"/Users/jeremy/Projects/lc-time-picker/src/lib/Combobox.jsx",[],"/Users/jeremy/Projects/lc-time-picker/src/lib/Select.jsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":255,"column":7,"nodeType":"45","endLine":261,"endColumn":8},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]